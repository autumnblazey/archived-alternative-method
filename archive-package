#!/usr/bin/env fish

# crash on dirty working dir
if not git diff --exit-code &> /dev/null
	echo "Your working directory is not clean, please make sure there are not any uncommitted changes"
	echo "before running this script again."
	echo
	echo "NOTE: This script will switch to all branches of the repo you intend to merge. If there are"
	echo "gitignore'd files that are not in the global gitignore or `.git/info/exclude`, they more"
	echo "than likely *will* make the working directory dirty and create conflicts, and that is undefined"
	echo "behaviour. Unless they are indeed ignored through your global gitignore or `.git/info/exclude`,"
	echo "please remove them to continue. If you are not sure, best to remove them to avoid problems."
	return
end

for repo in $argv
	set -l repo_url "https://github.com/"$repo".git"
	set -l current_branch (git branch --show-current)


	# set $branches
	set -l branches_unprocessed (git ls-remote --heads $repo_url)
	set -l branches
	for branch in $branches_unprocessed
		set -l branch (string split \trefs/heads/ $branch)
		set -l branch (string join \t $branch[1] $branch[2] $repo/$branch[2])
		set -a branches $branch
	end


	# set $tags
	set -l tags_unprocessed (git ls-remote --tags $repo_url)

	# that regex tho (please help improve it)
	set -l tags_unprocessed_raw (string join \n $tags_unprocessed | grep '[^^][^{][^}]$')
	# helpme with the `string join`s
	set -l tags_unprocessed_dereferenced (string join \n $tags_unprocessed | fgrep "^{}" | string sub -s 1 -e (math (string length $tag[2]) -3) $tag[2])
	set -l tags

	for tag in $tags_unprocessed_raw
		set -l tag (string split \trefs/tags/ $tag)

		# try to find a dereferenced version
		set -l tag_dereferenced (string join \n $tags_unprocessed_dereferenced | fgrep $tag[2])
		if test -n "$tag_dereferenced"
			# it exists!
			set -l tag (string split \trefs/tags/ $tag_dereferenced)
			set -a tags (string join \t $tag[1] $tag[2] $repo/$tag[2])
		else
			set -a tags (string join \t $tag[1] $tag[2] $repo/$tag[2])
		end
	end


	# set and fetch remote
	if git remote get-url $repo &> /dev/null
		git remote rm $repo
	end
	git remote add $repo $repo_url
	git fetch $repo --no-tags


	# push branches
	for branch in $branches
		set -l branch (string split \t $branch)

		set -l commit $branch[1]
		set -l original_branch $branch[2]
		set -l new_branch $branch[3]

		# new_branch format is the same as remote/branch so we can be a lil cheeky here
		git checkout -b $new_branch --track refs/remotes/$new_branch --no-guess
		git push -u origin $new_branch
	end


	# push tags
	for tag in $tags
		set -l tag (string split \t $tag)

		set -l commit $tag[1]
		set -l original_tag $tag[2]
		set -l new_tag $tag[3]

		git checkout $commit
		git tag $new_tag
	end
	git push origin --tags


	# reset
	git remote rm $repo
	git checkout $current_branch

	# reset branches
	for branch in $branches
		set -l local_branch (string split \t $branch)[3]
		git branch -D $local_branch
	end

	# reset tags
	for tag in $tags
		set -l local_tag (string split \t $tag)[3]
		git tag --delete $local_tag
	end


	# run a git fetch to update repo
	git fetch origin


	# add a thing to the readme
	echo "- ["$repo"](https://github.com/"$repo")" >> README.md
	git add -A
	git commit -m "add $repo"
end
